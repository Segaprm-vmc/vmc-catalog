import type { MotorcycleModel } from '@/types';

const MODELS_FILE_PATH = '/data/models.json';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const safeLocalStorage = {
  getItem: (key: string): string | null => {
    try {
      if (typeof window === 'undefined' || !window.localStorage) {
        return null;
      }
      return localStorage.getItem(key);
    } catch (error) {
      console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      return null;
    }
  },
  
  setItem: (key: string, value: string): boolean => {
    try {
      if (typeof window === 'undefined' || !window.localStorage) {
        return false;
      }
      localStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', error);
      return false;
    }
  },
  
  removeItem: (key: string): boolean => {
    try {
      if (typeof window === 'undefined' || !window.localStorage) {
        return false;
      }
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ localStorage:', error);
      return false;
    }
  }
};

export class ModelsAPI {
  static async getAllModels(_forceFromJSON = false): Promise<MotorcycleModel[]> {
    try {
      // –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ JSON —Ñ–∞–π–ª–∞ (fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π ModelsAPI, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Supabase');
      
      const response = await fetch(MODELS_FILE_PATH, {
        cache: 'no-cache',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞:', data.length);
      return Array.isArray(data) ? data : [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error);
      return [];
    }
  }

  static async saveAllModels(models: MotorcycleModel[]): Promise<boolean> {
    try {
      console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π ModelsAPI');
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage –∫–∞–∫ fallback
      const success = safeLocalStorage.setItem('vmc-models', JSON.stringify(models));
      
      if (success) {
        console.log('üíæ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage (fallback):', models.length);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage');
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
      return false;
    }
  }

  static async createModel(modelData: Omit<MotorcycleModel, 'id' | 'createdAt'>): Promise<MotorcycleModel | null> {
    try {
      console.warn('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π ModelsAPI');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
      const allModels = await this.getAllModels();

      const newModel: MotorcycleModel = {
        id: `vmc-${Date.now()}`,
        ...modelData,
        createdAt: new Date().toISOString(),
        order: Math.max(...allModels.map(m => m.order || 0), 0) + 1
      };

      const updatedModels = [...allModels, newModel];
      const success = await this.saveAllModels(updatedModels);
      
      return success ? newModel : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
      return null;
    }
  }

  static async updateModel(id: string, modelData: Partial<MotorcycleModel>): Promise<MotorcycleModel | null> {
    try {
      console.warn('‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π ModelsAPI');
      
      const allModels = await this.getAllModels();
      const modelIndex = allModels.findIndex(m => m.id === id);
      
      if (modelIndex === -1) {
        console.error('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', id);
        return null;
      }

      const updatedModel = { ...allModels[modelIndex], ...modelData };
      allModels[modelIndex] = updatedModel;
      
      const success = await this.saveAllModels(allModels);
      return success ? updatedModel : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
      return null;
    }
  }

  static async deleteModel(id: string): Promise<boolean> {
    try {
      console.warn('‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π ModelsAPI');
      
      const allModels = await this.getAllModels();
      const filteredModels = allModels.filter(m => m.id !== id);
      
      if (filteredModels.length === allModels.length) {
        console.error('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', id);
        return false;
      }
      
      return await this.saveAllModels(filteredModels);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
      return false;
    }
  }

  static async reorderModels(modelIds: string[]): Promise<boolean> {
    try {
      const allModels = await this.getAllModels();
      const reorderedModels = modelIds.map((id, index) => {
        const model = allModels.find(m => m.id === id);
        if (!model) throw new Error(`–ú–æ–¥–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return { ...model, order: index + 1 };
      });

      return await this.saveAllModels(reorderedModels);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      return false;
    }
  }

  static async moveModel(id: string, direction: 'up' | 'down'): Promise<boolean> {
    try {
      const allModels = await this.getAllModels();
      const sortedModels = allModels.sort((a, b) => (a.order || 999) - (b.order || 999));
      const currentIndex = sortedModels.findIndex(m => m.id === id);
      
      if (currentIndex === -1) {
        throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (
        (direction === 'up' && currentIndex === 0) ||
        (direction === 'down' && currentIndex === sortedModels.length - 1)
      ) {
        return false; // –ú–æ–¥–µ–ª—å —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
      }

      const newModels = [...sortedModels];
      const targetIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
      
      // –û–±–º–µ–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      [newModels[currentIndex], newModels[targetIndex]] = 
      [newModels[targetIndex], newModels[currentIndex]];

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
      newModels.forEach((model, index) => {
        model.order = index + 1;
      });

      return await this.saveAllModels(newModels);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
      return false;
    }
  }

  static async searchModels(query: string): Promise<MotorcycleModel[]> {
    try {
      const allModels = await this.getAllModels();
      
      if (!query.trim()) {
        return allModels.sort((a, b) => (a.order || 999) - (b.order || 999));
      }

      const searchQuery = query.toLowerCase();
      return allModels.filter(model => 
        model.name.toLowerCase().includes(searchQuery) ||
        model.description.toLowerCase().includes(searchQuery) ||
        Object.values(model.specifications).some(spec => 
          spec.toLowerCase().includes(searchQuery)
        )
      ).sort((a, b) => (a.order || 999) - (b.order || 999));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
      return [];
    }
  }

  static async getModelById(id: string): Promise<MotorcycleModel | null> {
    try {
      const allModels = await this.getAllModels();
      return allModels.find(m => m.id === id) || null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
      return null;
    }
  }
} 