import type { MotorcycleModel } from '@/types';
import { SupabaseModelsAPI } from '@/api/supabaseModels';

// const API_BASE_URL = '/api';
const MODEL_UPDATE_EVENT = 'models-updated';

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ API
const getActiveAPI = () => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Supabase (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase API');
  return SupabaseModelsAPI;
  
  // Fallback –Ω–∞ TabStateSync —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω Supabase
  // const supabaseUrl = localStorage.getItem('vmc_supabase_url');
  // const supabaseKey = localStorage.getItem('vmc_supabase_key');
  // 
  // if (supabaseUrl && supabaseKey) {
  //   console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase API');
  //   return SupabaseModelsAPI;
  // } else {
  //   console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º TabStateSync API');
  //   return SyncedModelsAPI;
  // }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)
// const apiRequest = async (url: string, options: RequestInit = {}): Promise<any> => {
//   try {
//     const response = await fetch(API_BASE_URL + url, {
//       headers: {
//         'Content-Type': 'application/json',
//         ...options.headers,
//       },
//       ...options,
//     });

//     if (!response.ok) {
//       throw new Error(`HTTP error! status: ${response.status}`);
//     }

//     return await response.json();
//   } catch (error) {
//     console.error('API –∑–∞–ø—Ä–æ—Å –æ—à–∏–±–∫–∞:', error);
//     throw error;
//   }
// };

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤
 */
export const getModels = async (): Promise<MotorcycleModel[]> => {
  try {
    const API = getActiveAPI();
    const models = await API.getAllModels();
    return models.sort((a: MotorcycleModel, b: MotorcycleModel) => (a.order || 999) - (b.order || 999));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error);
    return [];
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ ID
 */
export const getModelById = async (id: string): Promise<MotorcycleModel | null> => {
  const API = getActiveAPI();
  return await API.getModelById(id);
};

/**
 * –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
 */
export const searchModels = async (query: string): Promise<MotorcycleModel[]> => {
  const API = getActiveAPI();
  return await API.searchModels(query);
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
 */
export const addModel = async (model: MotorcycleModel): Promise<{ success: boolean; message?: string; modelId?: string }> => {
  try {
    const API = getActiveAPI();
    const { id, createdAt, ...modelData } = model;
    const newModel = await API.createModel(modelData);
    
    if (newModel) {
      notifyModelsUpdated();
      console.log('–ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:', newModel.name, 'ID:', newModel.id);
      return { 
        success: true, 
        message: '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
        modelId: newModel.id 
      };
    } else {
      return { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞' 
    };
  }
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
 */
export const updateModel = async (updatedModel: MotorcycleModel): Promise<{ success: boolean; message?: string }> => {
  try {
    const API = getActiveAPI();
    const result = await API.updateModel(updatedModel.id, updatedModel);
    
    if (result) {
      notifyModelsUpdated();
      console.log('–ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result.name);
      return { 
        success: true, 
        message: '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' 
      };
    } else {
      return { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞' 
    };
  }
};

/**
 * –£–¥–∞–ª—è–µ—Ç –º–æ–¥–µ–ª—å
 */
export const deleteModel = async (id: string): Promise<{ success: boolean; message?: string }> => {
  try {
    const API = getActiveAPI();
    const success = await API.deleteModel(id);
    
    if (success) {
      notifyModelsUpdated();
      console.log('–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞:', id);
      return { 
        success: true, 
        message: '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' 
      };
    } else {
      return { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    return { 
      success: false, 
      message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞' 
    };
  }
};

/**
 * –ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –º–æ–¥–µ–ª–∏
 */
export const updateModelOrder = async (modelId: string, newOrder: number): Promise<boolean> => {
  try {
    const API = getActiveAPI();
    const success = await API.updateModel(modelId, { order: newOrder });
    if (success) {
      notifyModelsUpdated();
      console.log('–ü–æ—Ä—è–¥–æ–∫ –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:', modelId, newOrder);
      return true;
    }
    return false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –º–æ–¥–µ–ª–∏:', error);
    return false;
  }
};

/**
 * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–æ–¥–µ–ª—å –≤–≤–µ—Ä—Ö –≤ —Å–ø–∏—Å–∫–µ
 */
export const moveModelUp = async (modelId: string): Promise<boolean> => {
  try {
    const API = getActiveAPI();
    const success = await API.moveModel(modelId, 'up');
    if (success) {
      notifyModelsUpdated();
    }
    return success;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤–≤–µ—Ä—Ö:', error);
    return false;
  }
};

/**
 * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –º–æ–¥–µ–ª—å –≤–Ω–∏–∑ –≤ —Å–ø–∏—Å–∫–µ
 */
export const moveModelDown = async (modelId: string): Promise<boolean> => {
  try {
    const API = getActiveAPI();
    const success = await API.moveModel(modelId, 'down');
    if (success) {
      notifyModelsUpdated();
    }
    return success;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤–Ω–∏–∑:', error);
    return false;
  }
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º
 */
export const reorderAllModels = async (): Promise<boolean> => {
  try {
    const API = getActiveAPI();
    const models = await getModels();
    const modelIds = models.map(m => m.id);
    const success = await API.reorderModels(modelIds);
    
    if (success) {
      notifyModelsUpdated();
    }
    
    return success;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ (—Ç–µ–ø–µ—Ä—å –∏–∑ Supabase)
 */
export const getBaseModels = async (): Promise<MotorcycleModel[]> => {
  // –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–¥–µ–ª–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Supabase
  return await getModels();
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –±–∞–∑–æ–≤–æ–π (—Ç–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ Supabase)
 */
export const isBaseModel = async (id: string): Promise<boolean> => {
  // –í—Å–µ –º–æ–¥–µ–ª–∏ —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞—é—Ç—Å—è –±–∞–∑–æ–≤—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Supabase
  const model = await getModelById(id);
  return model !== null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π
const notifyModelsUpdated = () => {
  window.dispatchEvent(new CustomEvent(MODEL_UPDATE_EVENT));
};

// –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
export { MODEL_UPDATE_EVENT };