#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é VMC –ö–∞—Ç–∞–ª–æ–≥–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ dist
const distPath = path.join(__dirname, '..', 'dist');
if (!fs.existsSync(distPath)) {
  console.error('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run build');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º .htaccess –¥–ª—è Apache
const htaccessContent = `RewriteEngine On
RewriteBase /

# Handle SPA routes
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.html [L]

# Cache static assets
<IfModule mod_expires.c>
    ExpiresActive on
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
</IfModule>

# Security headers
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
</IfModule>`;

fs.writeFileSync(path.join(distPath, '.htaccess'), htaccessContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω .htaccess —Ñ–∞–π–ª –¥–ª—è Apache');

// –°–æ–∑–¥–∞–µ–º nginx.conf –¥–ª—è Nginx
const nginxContent = `server {
    listen 80;
    server_name your-domain.com;
    root /path/to/dist;
    index index.html;

    # Handle SPA routes
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # JSON files - no cache
    location ~* \\.json$ {
        add_header Cache-Control "no-cache";
        add_header Access-Control-Allow-Origin "*";
    }

    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
}`;

fs.writeFileSync(path.join(distPath, 'nginx.conf'), nginxContent);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω nginx.conf —Ñ–∞–π–ª –¥–ª—è Nginx');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'index.html',
  'data/models.json',
  'data/news.json', 
  'data/regulations.json'
];

const missingFiles = [];
requiredFiles.forEach(file => {
  const filePath = path.join(distPath, file);
  if (!fs.existsSync(filePath)) {
    missingFiles.push(file);
  }
});

if (missingFiles.length > 0) {
  console.warn('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:');
  missingFiles.forEach(file => console.warn(`   - ${file}`));
  console.warn('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ dist/\n');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
const getDirectorySize = (dirPath) => {
  let totalSize = 0;
  if (fs.existsSync(dirPath)) {
    const files = fs.readdirSync(dirPath, { withFileTypes: true });
    files.forEach(file => {
      const filePath = path.join(dirPath, file.name);
      if (file.isDirectory()) {
        totalSize += getDirectorySize(filePath);
      } else {
        totalSize += fs.statSync(filePath).size;
      }
    });
  }
  return totalSize;
};

const totalSize = getDirectorySize(distPath);
const sizeMB = (totalSize / 1024 / 1024).toFixed(2);

console.log(`üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ${sizeMB} MB`);

if (totalSize > 50 * 1024 * 1024) { // 50MB
  console.warn('‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.');
}

// –°–æ–∑–¥–∞–µ–º README –¥–ª—è –¥–µ–ø–ª–æ—è
const deployReadme = `# –§–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist/

–í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:
- **Apache**: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .htaccess (—É–∂–µ –≤–∫–ª—é—á–µ–Ω)
- **Nginx**: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ nginx.conf –∫–∞–∫ –æ—Å–Ω–æ–≤—É

### –í–∞–∂–Ω—ã–µ –ø–∞–ø–∫–∏:
- \`data/\` - JSON —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
- \`images/\` - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π, –Ω–æ–≤–æ—Å—Ç–µ–π, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤
- \`assets/\` - CSS –∏ JS —Ñ–∞–π–ª—ã

### –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∞–π—Ç

### –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:
–î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: \`/admin\`

–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}
–†–∞–∑–º–µ—Ä: ${sizeMB} MB
`;

fs.writeFileSync(path.join(distPath, 'DEPLOY-README.txt'), deployReadme);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω DEPLOY-README.txt —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏');

console.log('\nüéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüìÅ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
console.log(`   ${distPath}`);
console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: DEPLOYMENT.md');
console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞: .htaccess –∏–ª–∏ nginx.conf');
console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é: DEPLOY-README.txt\n'); 